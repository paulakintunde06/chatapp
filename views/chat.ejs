<%- include('includes/head.ejs') %>
<link rel="stylesheet" href="/css/forum.css">
<%- include('includes/header.ejs') %>
    <main>
        <section>
            <h4>Chat</h4>
            <h6>Chat with <span style="color: green; font-weight: bolder;"><%= username %></span> </h6>
            <div id="chats" style="overflow-y: scroll;">
                <% if (messages.length > 0) { %> 
                    <% for (let message of messages) { %>
                        <% if (message.sender_id == sender_id) { %>
                 <p id="prev_my_chat"><%= message.message %></p>
               <% } else { %>
               <p id="prev_other_chat"><%= message.message %></p>
               <% } %>
               <% } %>
               <% } %>

            </div>
                <form class="form-control" id="chat-form">
                    <input type="text" name="message" id="message" placeholder="Type your message..." required>
                    <input type="hidden" name="sender_id" value="<%= sender_id %>" >
                    <input type="hidden" name="receiver_id" value="<%= receiver_id %>" >
                    <input type="hidden" name="isForum" value="<%= false %>" > 
                    <input type="hidden" name="csrf_token" value="<%= csrfToken %>">
                    <button type="submit">Send Message</button>
                </form>
        </section>
        <a id="logout" href="/logout">Logout</a>
    </main>
    <script src="/socket.io/socket.io.js?v=<%= new Date().getTime() %>"></script> 
        <script> 
        // console.log("socket for chat.ejs")
        // const socket = io();
        const chatSocket = io('/chat');
    if(typeof(io) === 'undefined'){
        console.error("socket.IO not loaded - check network tab")
        alert("Socket.IO failed to load")
    } else{
        console.log("Socket.IO loaded")
    }

        const chatBox = document.getElementById('chats');
        const form = document.getElementById('chat-form')
        const messageInput = document.getElementById('message');
        const sender_id = document.querySelector('[name="sender_id"').value;
        const receiver_id = document.querySelector('[name="receiver_id"').value;
        const isForum = document.querySelector('[name="isForum"]').value;
        const csrfToken = document.querySelector('[name="csrf_token"]').value;
         // Scroll to the latest message
         chatBox.scrollTop = chatBox.scrollHeight;

        // Send a message to the Server
        form.addEventListener('submit', (e) =>{
            e.preventDefault();
            alert("I'm prepared to submit form")
            const message = messageInput.value.trim();
            console.log(message, sender_id, receiver_id)
            if(message){
                console.log("Sending message via Socket.IO:")
                chatSocket.emit('chatMessage', {
                    message,
                     sender_id: parseInt(sender_id),
                      receiver_id: parseInt(receiver_id),
                       isForum,
                     _csrf: csrfToken
                    });
            }
            messageInput.value = '';
        });

        // Receive messages from the server
        chatSocket.on('chatMessage', (data) =>{
            console.log("New chat message received:", data);

            const newMessage = document.createElement('p');
            const isMyMessage = parseInt(data.sender_id) === parseInt(sender_id);

            if(isMyMessage){
                newMessage.setAttribute("id", "my_chat")
                newMessage.textContent = `${data.message}`;
            } else{
                newMessage.setAttribute("id", "other_chat")
                newMessage.textContent = `${data.message}`;
            }
            console.log(newMessage)
            chatBox.appendChild(newMessage);

            // Scroll to the latest message
            chatBox.scrollTop = chatBox.scrollHeight;
        })
        // Connection status for debugging
        chatSocket.on('connect', () =>{
            console.log("Connected to the chat namespace");
        });
        chatSocket.on('disconnect', () =>{
            console.log("Disconnected from chat namespace")
        })
    </script>
</body>
</html>