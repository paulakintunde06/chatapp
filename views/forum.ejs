<%- include('includes/head.ejs') %>
<link rel="stylesheet" href="css/forum.css">
<%- include('includes/header.ejs') %>
<main>
        <section>
            <h4>Forum</h4>
            <div id="chats" style="overflow-y: scroll;">
                <% if (forum.length > 0) { %> 
                    <% for (let message of forum) { %>
                        <% if (message.sender_id == sender_id){ %>
                            <p id="prev_my_chat"><strong>You: </strong><%= message.message %></p>
                        <% } else { %>
                            <p id="prev_other_chat">
                                <strong style="color:black"><%=message.username%>: </strong><%= message.message%></p>
                            <% } %>
                        <% } %>
                 <% } %>
            </div>
                <form class="form-control" id="chat-form">
                    <input type="text" name="message" id="message" placeholder="Type your message here...">
                    <input type="hidden" name="sender_id" value="<%= sender_id %>">
                    <input type="hidden" name="isForum" value="<%= true %>">
                    <input type="hidden" name="username" id="username" value="<%= username %>">
                    <!-- <input type="hidden" name="receiver_id" value="2"> -->
                    <input type="hidden" name="csrf_token" value="<%= csrfToken %>">
                    <button type="submit">Post</button>
                </form>
            </section>
        <a id="logout" href="/logout">Logout</a>
    </main>
    <script src="/socket.io/socket.io.js"></script> 
        <script> 

        //FORUM
        const forumSocket = io('/forum');
        console.log("forum")

        const form = document.getElementById('chat-form')
        const csrfToken = document.querySelector('[name="csrf_token"]').value;
        const chatBox = document.getElementById('chats');
        
        // console.log(username)
        // Scroll to the latest message
        
        // Send a message to the Server
        form.addEventListener('submit', (e) =>{
            e.preventDefault();
            const sender_id = document.querySelector('[name="sender_id"]').value;
            const isForum = document.querySelector('[name="isForum"]').value;
            const message = document.getElementById('message').value.trim();
            if(message){
                const immediateMessage = document.createElement('p');
                immediateMessage.setAttribute("id", "my_chat");
                immediateMessage.innerHTML = `<strong>You: </strong> ${message}`;
                chatBox.appendChild(immediateMessage);
                chatBox.scrollTop = chatBox.scrollHeight;
                forumSocket.emit('forumMessage', { message, sender_id: parseInt(sender_id), isForum, _csrf: csrfToken});
                document.getElementById('message').value = '';

            }

        });
        
        // Receive messages from the server
        forumSocket.on('forumMessage', (data) =>{
            const my_id = document.querySelector('[name="sender_id"]').value
            const isMyMessage = Number(data.sender_id) === Number(my_id);
            
            if(!isMyMessage){
                let newMessage = document.createElement('p');
                newMessage.setAttribute("id", "other_chat")
                newMessage.innerHTML = `<strong>${data.username}: </strong> ${data.message}`;
                chatBox.appendChild(newMessage);
                chatBox.scrollTop = chatBox.scrollHeight;
                chatBox.appendChild(newMessage);
            }
            
            
            // Scroll to the latest message
            chatBox.scrollTop = chatBox.scrollHeight;
        })
         // NOTIFICATION FUNCTIONS
         function showNotification(message, type= 'info'){
         // Check if browser supports notification
         if(!("Notification" in window)){
         console.log("This browser does not support notifications")
         return;
         }

         // Request Permission if not granted
         if(Notification.permission === "default"){
         Notification.requestPermission().then(permission => {
         if(permission === "granted"){
         createNotification(message, type);
         }
         });
         } else if(Notification.permission === "granted"){
         createNotification(message, type)
         }

         // Also show in-app notification
         showInAppNotification(message,type);
         }

         function createNotification(message, type){
         const notification = new Notification('Chat App', {
         body: message,
         icon: '/images/icon.png', // Add yu app icon
         tag: 'chat-notification'
         });

         notification.onclick = function(){
         window.focus();
         notification.close();
         };
         setTimeout(notification.close.bind(notification), 5000)
         }

         function showInAppNotification(message,type){
         // create in-app notification element
         const notification = document.createElement('div');
         notification.className = `in-app-notification ${type}`;
         notification.innerHTML = `
         <span> ${message} </span>
         <button onclick="this.parentElement.remove()">&times;</button>`;
         }
         // Add Styles if not already added
        if(!document.querySelector('#notfication-style')){
            const styles = document.createElement('style');
            styles.id = 'notification-styles';
            styles.textContent = `
                .in-app-notification{
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #007bff;
                    color: white;
                    padding: 15px;
                    border-radius: 5px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    z-index: 1000;
                    max-width: 300px;
                    animation: slideIn 0.3s ease-out;
                }
                .in-app-notification.info{background: #007bff;}
                .in-app-notification.success{background: 328a745;}
                .in-app-notification.warning{background: #ffc107; color: #000;}
                .in-app-notification.error{background: #dc3545;}
                .in-app-notification.warning{
                background: none;
                border: none;
                color: inherit;
                font-size: 18px;
                cursor: pointer;
                margin-left: 10px;
                }
                @keyframes slideIn{
                from{ transform: translateX(100%); opacity: 0;}
                    to{ transform: translateX(0); opacity: 1;}
                }
        `;
            document.head.appendChild(stules);
        }
            document.body.appendChild(notification);
        
        setTimeout(()=>{
            if(notification.parenetElement){
                notification.remove()
            }
         }, 5000);

        // Connection status for debugging
        forumSocket.on('connect', () =>{
        console.log("Connected to the forum namespace");
        });
        forumSocket.on('disconnect', () =>{
        console.log("Disconnected from forum namespace")
        })
    </script>
<%- include('includes/footer.ejs') %>